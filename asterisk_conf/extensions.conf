[general]
static=yes
writeprotect=no
autofallthrough=yes
clearglobalvars=no

[globals]
SERVER_IP=IP_PLACEHOLDER

#include "extensions_main.conf"

[sub-initial-setup]
exten => s,1,NoOp(Processing incoming call for minimal debug)
same => n,DumpChan()
same => n,Return()

[sub-call-answering-monitoring]
exten => s,1,Answer()
same => n,MixMonitor(${MONITOR_FILENAME}.wav,r(${MONITOR_FILENAME}_right.wav)t(${MONITOR_FILENAME}_left.wav))
# same => n,TryExec(AudioSocket(${uuid},${server_info}))
same => n,TryExec(AudioSocket(${uuid},${SERVER_IP}:${SERVER_PORT}))
same => n,NoOp("Continuing regardless of AudioSocket success")
same => n,StopMixMonitor()
same => n,Return()

[combined-hangup]
exten => s,1,NoOp(Combined hangup handler started)
same => n,NoOp(Processing audio for MONITOR_FILENAME: ${ARG3})
same => n,StopMixMonitor()
same => n,System(sox -M ${ARG3}_left.wav ${ARG3}_right.wav ${ARG3}-complete.wav 2>&1)
same => n,NoOp(sox output: ${SYSTEMOUT})
same => n,Set(SOX_STATUS=${SYSTEMSTATUS})
same => n,NoOp(SOX_STATUS: ${SOX_STATUS})
same => n,Set(FILE_CHECK=${SHELL(test -f ${ARG3}-complete.wav && echo "File exists" || echo "File does not exist")})
same => n,NoOp(File check: ${FILE_CHECK})
same => n,Set(FILE_SIZE=${SHELL(ls -l ${ARG3}-complete.wav | awk '{print $5}')})
same => n,NoOp(Size of complete file: ${FILE_SIZE} bytes)

; Perform cleanup regardless of previous errors
same => n,System(rm ${ARG3}_left.wav ${ARG3}_right.wav ${ARG3}.wav 2>&1)
same => n,NoOp(Cleanup output: ${SYSTEMOUT})
same => n,Set(CLEANUP_STATUS=${SYSTEMSTATUS})
same => n,NoOp(CLEANUP_STATUS: ${CLEANUP_STATUS})

; Check for any errors in the process
same => n,GotoIf($["${SOX_STATUS}" != "SUCCESS" | "${FILE_CHECK}" != "File exists" | ${FILE_SIZE} < 1000 | "${CLEANUP_STATUS}" != "SUCCESS"]?error_handling)

same => n,NoOp(Audio post-processing and cleanup completed successfully)
same => n,Return()

same => n(error_handling),NoOp(Error occurred during processing)
same => n,Set(ERROR_MESSAGE=Sox Status: ${SOX_STATUS}, File Check: ${FILE_CHECK}, File Size: ${FILE_SIZE}, Cleanup Status: ${CLEANUP_STATUS})
same => n,NoOp(Error details: ${ERROR_MESSAGE})
same => n,System(echo "Error in hangup handler for ${ARG3}: ${ERROR_MESSAGE}" >> /var/log/asterisk/hangup_errors.log)
same => n,System(ls -l ${ARG3}* >> /var/log/asterisk/hangup_errors.log 2>&1)
same => n,Return()
[incoming-main]

exten => medicare,1,Set(call_type=medicare)
exten => medicare,n,Goto(common-handling,1)

exten => medicare2,1,Set(call_type=medicare2)
exten => medicare2,n,Goto(common-handling,1)

exten => aca2,1,Set(call_type=aca2)
exten => aca2,n,Goto(common-handling,1)

exten => aca,1,Set(call_type=aca)
exten => aca,n,Goto(common-handling,1)

exten => fe,1,Set(call_type=fe)
exten => fe,n,Goto(common-handling,1)

exten => common-handling,1,Gosub(sub-initial-setup,s,1)

; Assign the channel to a group
same => n,Set(GROUP()=all@incoming-all)

; Check the number of active calls to this endpoint
same => n,Set(current_calls=${GROUP_COUNT(all@incoming-all)})

; Check if we have more than 50 calls and take appropriate action
same => n,GotoIf($[${current_calls} > 30]?reject_call)

same => n,Set(lead_id=${PJSIP_HEADER(read,X-VICIdial-Lead-Id)})
same => n,Set(caller_id=${PJSIP_HEADER(read,X-VICIdial-Caller-Id)})
same => n,Set(client_id=${PJSIP_HEADER(read,X-VICIdial-Client-Id)})
same => n,Set(campaign_id=${PJSIP_HEADER(read,X-VICIdial-Campaign-Id)})
same => n,Set(source_ip=${PJSIP_HEADER(read,X-Original-IP)})
same => n,Set(serial_number=${PJSIP_HEADER(read,X-Serial-Number)})
same => n,NoOp(Extracted SIP headers)

; Generate UUID early in the call flow
same => n,Set(uuid=${SHELL(uuidgen | tr -d '\n')})
same => n,NoOp(Generated UUID: ${uuid})

; Extract CallerID name
same => n,Set(CallerIDName=${CALLERID(name)})
same => n,NoOp(CallerID Name: ${CallerIDName})

; Extract Remote Party ID
same => n,Set(TempRemotePartyID=${PJSIP_HEADER(read,Remote-Party-ID)})
same => n,NoOp(Remote-Party-ID value: ${TempRemotePartyID})
same => n,Set(TempRemotePartyID=${CUT(TempRemotePartyID,\",2)})
same => n,NoOp(Isolated Remote-Party-ID value: ${TempRemotePartyID})

; Set RemotePartyID based on CallerIDName or Remote Party ID
same => n,Set(RemotePartyID=${IF($["${CallerIDName}" != ""]?${CallerIDName}:${TempRemotePartyID})})
same => n,NoOp(Final RemotePartyID value: ${RemotePartyID})

;Creating and checking if the directory exists
same => n,System(mkdir -p /home/voxxverso/voxx/src/asterisk/recordings/${client_id})

;Changing the permissions of the directory
same => n,System(chmod 775 /home/voxxverso/voxx/src/asterisk/recordings/${client_id})

;Changing the group ownership of the directory
same => n,System(chgrp voxxverso /home/voxxverso/voxx/src/asterisk/recordings/${client_id})

; Logging the extracted information for debugging purposes
same => n,System(echo "type: ${call_type}\nserial_number: ${serial_number}\nclient_id: ${client_id}\nuuid: ${uuid}\nlead_id: ${lead_id}\ncaller_id: ${caller_id}\nremote_party_id: ${RemotePartyID}\ncampaign_id: ${campaign_id}\nsource_ip: ${source_ip}" >> /home/voxxverso/voxx/src/asterisk/${uuid}.txt)

same => n,Set(SERVER_IP=127.0.0.1)
same => n,Set(SERVER_PORT=5002)

same => n,Set(MONITOR_FILENAME=/home/voxxverso/voxx/src/asterisk/recordings/${client_id}/${uuid})
same => n,NoOp(Set MONITOR_FILENAME: ${MONITOR_FILENAME})

; Set up hangup handler to ensure server release and audio processing
same => n,Set(CHANNEL(hangup_handler_push)=combined-hangup,s,1(${SERVER_IP},${SERVER_PORT},${MONITOR_FILENAME}))

same => n,Set(CHANNEL(rxgain)=4)

same => n,Gosub(sub-call-answering-monitoring,s,1)

same => n,Wait(2)
same => n,Hangup()

; Reject the call if there are more than 30 calls
same => n(reject_call),Busy()